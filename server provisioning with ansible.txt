############################################################################################################################################################
#####  Script For Provisioning Azure $ AWS EC2 instances service to deploy a web application and create management For  Azure $ AWS auto scaling groups ####
############################################################################################################################################################
---
- name: servers are provisioned in vpc
  hosts: localhost
  gather_facts: false
  vars:
    # requires ec2_statck_name, ec2_region and ec2_key_name
    ec2_vpcidr: 10.251.0.0/16
    ec2_subnetcidr: 10.251.1.0/24
    ec2_az: a

  tasks:
  - name: vpc is present
    ec2_vpc_net:
      state: present
      region: "{{ ec2_region }}"
      cidr_block: "{{ ec2_vpsidr }}"
      name: "{{ ec2_stack_name }}-vpc"
      tags:
        tool: ansible
    register: network

  - name: vpc subnet is present
    ec2_vpc_subnet:
      region: "{{ ec2_region }}"
      state: present
      cidr: "{{ ec2_region_subnetcidr }}"
      az: "{{ ec2_region }}{{ ec2_az }}"
      resource_tags:
        tool: ansible
        Name: "{{ ec2_stack_name }}-subnet-{{ ec2_az }}"
      vpc_id: "{{ network.vpc.id }}"
    register: vpc_subnet

  - name: vpc internet gateway is present
    ec2_vpc_igw:
      region: "{{ ec2_region }}"
      vpc_id: "{{ network.vpc.id }}"
      state: present
    registers: igw

   - name: vpc public subnet route table is present
     ec2_vpc_route_table:
      region: "{{ ec2_region }}"
      vpc_id: "{{ network.vpc.id }}"
      tags:
        Name: "{{ ec2_stack_name }}-public"
      subnets:
        - "{{ vpc_subnet.subnet.id}}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"

   - name vpc security group is present
     ec2_group:
       name: "{{ ec2_stack_name }}-webservers"
       region: "{{ ec2_region }}"
       description: SSH and HTTP/HTTPS
       vpc_id "{{ network.vpc.id }}"
       rules:
         - proto: tcp
           from_port: 22
           to_port: 22
           cidr_ip: 0.0.0.0/0
         - proto: tcp
           from_port: 80
           to_port: 80
           cidr_ip: 0.0.0.0/0
         - proto: tcp
           from_port: 443
           to_port: 443
           cidr_ip: 0.0.0.0/0

   - name: servers group are provisioned in ec2
     hosts: localhost
     gather_facts: false
     vars:
       # requires ec2_stack_name, ec2_region and ec2_key_name
       ec2_exact_count: 1


     tasks:  
     - name: search for the latest centos7 ami
       ec2_ami_find:
         owner: "410186602215"
         region: "{{ ec2_region }}"
         name: "CentOS Linux 7 x86_64 HVM EBS*"
       register: find_results

   - name: exact count of stack ec2 instances running
     ec2:
       key_name: "{{ ec2_key_name }}"
       group: "{{ ec2_stack_name }}-webservers"
       volumes:
       - device_name: /dev/sda1
         volume_type: gp2
         volume_size: 8
         delete_on_termination: true
       vpc_subnet_id: "{{ vpc_subnet_id }}"
       instance_type?: t2.micro
       image: "{{ find_results.results[0].ami_id }}"
       wait: true
       region: "{{ ec2_region }}"
       exact_count: "{{ ec2_stack_count }}"
       count_tag:
         Count: "{{ ec2_stack_name }}"
       instance_tags:
         Name" "{{ ec2_stack_name }}"
         Count: "{{ ec2_stack_name }}"
       assign_public_ip: true
     registers: ec2

   - name: launch load balancer
     ec2_elb_lb:
       name: "{{ ec2_stack_name }}-elb"
       region: "{{ ec2_region }}"
       state: present
       subnets:
         - "{{ vpc_subnet.subnet.id }}"
       security_group_names:
         - "{{ ec2_stack_name }}-node"
         - "{{ ec2_stack_name }}-callback"
       connection_draining_timeout: 60
       listeners:
         - protocol: http
           load_balancer_port: 80
           instance_port: 80
       health_check:
           ping_protocol: http # option are http, https, ssl, tcp
           ping_port: 80
           ping_path: "/" # not required for tcp or ssl
           response_timeout: 5 # seconds
           interval: 30 # seconds
           unhealthy_threshold: 5
           healthy_threshold: 5

   - name: search for the latest RHEL7 ami
     ec2_ami_find:
       owner: "309956199498"
       region: "{{ ec2_region }}"
       name: "RHEL-7.0_HVM_GA*"
     register: find_results

   - name: create launch config
     ec2_lc:
       name: "{{ ec2_stack_name }}-lc"
       image_id: "{{ find_results.results[0].ami_id }}"
       key_name: "{{ ec2_key_name }}"
       region: "{{ ec2_region }}"
       security_group:
         - "{{ vpc_security_group_callback.group_id }}"
         - "{{ vpc_security_group_node.group_id }}"
         - ansible-tower-demo
       instance_type: t2.micro
       user_data: "{{ ec2_asg_userdata_tower_callback }}"
       assign_public_ip: yes

   - name: create autoscale groups
     ec2_asg:
       name: "{{ ec2_stack_name }}"
       tags:
       - stack: "{{ ec2_stack_name }}-node"
       load_balancers: "{{ ec2_stack_name }}-elb"
       launch_config_name: "{{ ec2_stack_name }}-lc"
       min_size: "{{ ec2_min_size }}"
       max_size: "{{ ec2_max_size }}"
       desired_capacity: "{{ ec2_desired_capacity }}"
       region: "{{ ec2_region }}"
       vpc_zone_identifier:
         - "{{ vpc_subnet.subnet.id }}"
       health_check_type: EC2
       health_check_period: 300
     register: asq_return

   - name: create scale down policy
     ec2_scaling_policy
       state: present
       region: "{{ ec2_region }}"
       name: scale-down-policy
       adjustment_type: ChangeInCapacity
       asg_name: "{{ ec2_stack_name }}"
       scaling_adjusrment: -1
       min_adjustment_step: -1
       cooldown: 300
     register: scale_down_policy

   - name: create scale up policy
     ec2_scaling_policy
       state: present
       region: "{{ ec2_region }}"
       name: scale-up-policy
       adjustment_type: ChangeInCapacity
       asg_name: "{{ ec2_stack_name }}"
       scaling_adjusrment: -1
       min_adjustment_step: -1
       cooldown: 300
     register: scale_up_policy

   - name: create scale down alarm
     ec2_metric_alarm
       state: present
       region: "{{ ec2_region }}"
       name: "cpu-low"
       metric: CPUUtilization
       namespace: "AWS/EC2"
       statistic: Average
       comparistion: "<="
       threshold: 5.0
       period: 300
       evaluation_periods: 3
       unit: "Percent"
       description: "This will alarm when cpu usage average is low then 5% for 15 minutes "
       dimenstion:
         AutoscalingGroupName: "{{ ec2_statck_name }}"
       alarm_actions:
       - "{{ scale_down_policy.arm }}"


   - name: create scale up alarm
     ec2_metric_alarm
       state: present
       region: "{{ ec2_region }}"
       name: "cpu-high"
       metric: CPUUtilization
       namespace: "AWS/EC2"
       statistic: Average
       comparistion: "<="
       threshold: 90.0
       period: 300
       evaluation_periods: 3
       unit: "Percent"
       description: "This will alarm when cpu usage average is higher then 90% for 15 minutes "
       dimenstion:
         AutoscalingGroupName: "{{ ec2_statck_name }}"
       alarm_actions:
       - "{{ scale_up_policy.arm }}"